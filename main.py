import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database import Database
from models import User, Queue, QueueMember

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

queue_locks = {}
user_states = {}


async def get_queue_lock(queue_id: int):
    if queue_id not in queue_locks:
        queue_locks[queue_id] = asyncio.Lock()
    return queue_locks[queue_id]


def create_queue_actions_keyboard(queue_id: int, user_id: int, is_creator: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{queue_id}")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_{queue_id}")]
    ]
    
    if is_creator:
        buttons.extend([
            [InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_{queue_id}")],
            [InlineKeyboardButton(text="üë§ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"remove_user_{queue_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"delete_queue_{queue_id}")]
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_join_queue_keyboard(queue_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"join_{queue_id}")],
        [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")]
    ])


def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="create_queue")],
        [InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π", callback_data="list_queues")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])


async def notify_all_users_about_new_queue(queue_name: str, queue_id: int, exclude_user: int = None):
    try:
        users = await db.get_all_users()
        notification_text = f"üîî –ù–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã {queue_name}\nüÜî ID: {queue_id}\n\nüëÜ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
        
        keyboard = create_join_queue_keyboard(queue_id)
        
        for user in users:
            if exclude_user and user.id == exclude_user:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            try:
                await bot.send_message(user.id, notification_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏: {e}")


async def notify_user_about_queue_position(user_id: int, queue_name: str, position: int, total: int, queue_id: int):
    try:
        notification_text = f"üìç –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\nüìã {queue_name}\nüéØ –ü–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {total}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{queue_id}")],
            [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_{queue_id}")]
        ])
        
        await bot.send_message(user_id, notification_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def notify_user_about_turn(user_id: int, queue_name: str):
    try:
        notification_text = f"üéâ –¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –ø–æ–¥–æ—à–ª–∞!\n\nüìã {queue_name}\n‚è∞ –ü–æ–¥—Ö–æ–¥–∏ –∫ —Å–¥–∞—á–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
        await bot.send_message(user_id, notification_text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    try:
        user = await db.get_user(user_id)
        if user:
            welcome_text = f"üéâ –ü—Ä–∏–≤–µ—Ç, {user.username}!\n\nüìã –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        else:
            await db.create_user(user_id, username)
            welcome_text = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\nüìã –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏!"
        
        keyboard = create_main_menu_keyboard()
        await message.answer(welcome_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("create_queue"))
async def cmd_create_queue(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    queue_name = message.text.replace("/create_queue", "").strip()
    if not queue_name:
        await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: /create_queue <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    
    try:
        queue_id = await db.create_queue(queue_name, user_id)
        success_text = f"‚úÖ –û—á–µ—Ä–µ–¥—å '{queue_name}' —Å–æ–∑–¥–∞–Ω–∞!\n\nüÜî ID –æ—á–µ—Ä–µ–¥–∏: {queue_id}\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n\nüë• –ü–æ–¥–µ–ª–∏—Å—å ID —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"join_{queue_id}")],
            [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(success_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("join"))
async def cmd_join_queue(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    try:
        queue_id = int(message.text.replace("/join", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /join <queue_id>")
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            queue = await db.get_queue(queue_id)
            if not queue:
                await message.answer("–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            existing_member = await db.get_queue_member(queue_id, user_id)
            if existing_member:
                await message.answer("–¢—ã —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏!")
                return
            
            position = await db.add_to_queue(queue_id, user_id)
            total_members = await db.get_queue_member_count(queue_id)
            
            updated_text = f"‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å '{queue.name}'!\n\nüéØ –ü–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {total_members}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{queue_id}")],
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_{queue_id}")]
            ])
            
            await message.answer(updated_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("next"))
async def cmd_next(message: Message):
    user_id = message.from_user.id
    
    try:
        queue_id = int(message.text.replace("/next", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /next <queue_id>")
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            queue = await db.get_queue(queue_id)
            if not queue:
                await message.answer("–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if queue.creator_id != user_id:
                await message.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ.")
                return
            
            next_member = await db.get_next_in_queue(queue_id)
            if not next_member:
                await message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
                return
            
            await db.remove_from_queue(queue_id, next_member.user_id)
            
            await message.answer(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {next_member.user.username} –≤—ã–∑–≤–∞–Ω!")
            await notify_user_about_turn(next_member.user_id, queue.name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("status"))
async def cmd_status(message: Message):
    user_id = message.from_user.id
    
    try:
        queue_id = int(message.text.replace("/status", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /status <queue_id>")
        return
    
    try:
        member = await db.get_queue_member(queue_id, user_id)
        if not member:
            await message.answer("–¢—ã –Ω–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        queue = await db.get_queue(queue_id)
        total_members = await db.get_queue_member_count(queue_id)
        
        await message.answer(
            f"–û—á–µ—Ä–µ–¥—å: {queue.name}\n"
            f"–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {member.position}\n"
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("leave"))
async def cmd_leave_queue(message: Message):
    user_id = message.from_user.id
    
    try:
        queue_id = int(message.text.replace("/leave", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /leave <queue_id>")
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            member = await db.get_queue_member(queue_id, user_id)
            if not member:
                await message.answer("–¢—ã –Ω–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
                return
            
            await db.remove_from_queue(queue_id, user_id)
            await message.answer("‚úÖ –¢—ã –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("list_queues"))
async def cmd_list_queues(message: Message):
    try:
        queues = await db.get_all_queues()
        if not queues:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")
            return
        
        response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏:\n\n"
        for queue in queues:
            member_count = await db.get_queue_member_count(queue.id)
            response += f"ID: {queue.id} - {queue.name} ({member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/create_queue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
/join <queue_id> - –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
/next <queue_id> - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/status <queue_id> - —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è
/leave <queue_id> - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
/view_queue <queue_id> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å
/delete_queue <queue_id> - —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/remove_user <queue_id> <username> - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)

üëÜ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π", callback_data="list_queues")]
    ])
    
    await message.answer(help_text, reply_markup=keyboard)


@dp.message(Command("view_queue"))
async def cmd_view_queue(message: Message):
    try:
        queue_id = int(message.text.replace("/view_queue", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /view_queue <queue_id>")
        return
    
    try:
        queue = await db.get_queue(queue_id)
        if not queue:
            await message.answer("–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        members = await db.get_queue_members(queue_id)
        if not members:
            await message.answer(f"–û—á–µ—Ä–µ–¥—å '{queue.name}' –ø—É—Å—Ç–∞.")
            return
        
        response = f"–û—á–µ—Ä–µ–¥—å: {queue.name}\n\n"
        for member in members:
            response += f"{member.position}. {member.user.username}\n"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("delete_queue"))
async def cmd_delete_queue(message: Message):
    user_id = message.from_user.id
    
    try:
        queue_id = int(message.text.replace("/delete_queue", "").strip())
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏: /delete_queue <queue_id>")
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            success = await db.delete_queue(queue_id, user_id)
            if success:
                await message.answer("–û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer("–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("remove_user"))
async def cmd_remove_user(message: Message):
    user_id = message.from_user.id
    
    try:
        parts = message.text.replace("/remove_user", "").strip().split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /remove_user <queue_id> <username>")
            return
        
        queue_id = int(parts[0])
        target_username = parts[1]
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /remove_user <queue_id> <username>")
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            queue = await db.get_queue(queue_id)
            if not queue:
                await message.answer("–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
                return
            
            if queue.creator_id != user_id:
                await message.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                return
            
            target_user = await db.get_user_by_username(target_username)
            if not target_user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{target_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            success = await db.remove_user_from_queue(queue_id, target_user.id, user_id)
            if success:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
                
                try:
                    await bot.send_message(
                        target_user.id,
                        f"‚ö†Ô∏è –¢—ã –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue.name}' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except:
                    pass
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    
    await callback.message.edit_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu_keyboard()
    )
    await callback.answer()


@dp.callback_query(F.data == "list_queues")
async def callback_list_queues(callback: CallbackQuery):
    try:
        queues = await db.get_all_queues()
        if not queues:
            await callback.message.edit_text(
                "üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        
        response = "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏:\n\n"
        keyboard_buttons = []
        user_id = callback.from_user.id
        
        for queue in queues:
            member_count = await db.get_queue_member_count(queue.id)
            response += f"üÜî {queue.id} - {queue.name} ({member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
            
            is_member = await db.get_queue_member(queue.id, user_id) is not None
            
            if is_member:
                button_text = f"üìã {queue.name} (—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏)"
            else:
                button_text = f"üìã {queue.name}"
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"queue_info_{queue.id}"
            )])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("queue_info_"))
async def callback_queue_info(callback: CallbackQuery):
    try:
        queue_id = int(callback.data.split("_")[2])
        queue = await db.get_queue(queue_id)
        
        if not queue:
            await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        members = await db.get_queue_members(queue_id)
        is_creator = queue.creator_id == callback.from_user.id
        user_id = callback.from_user.id
        is_member = any(member.user_id == user_id for member in members)
        
        response = f"üìã {queue.name}\nüÜî ID: {queue.id}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
        
        if members:
            response += "\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
            for member in members[:10]:
                response += f"{member.position}. {member.user.username}\n"
            if len(members) > 10:
                response += f"... –∏ –µ—â–µ {len(members) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        if is_member:
            keyboard = create_queue_actions_keyboard(queue_id, callback.from_user.id, is_creator)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"join_{queue_id}")],
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")]
            ])
            if is_creator:
                keyboard.inline_keyboard.extend([
                    [InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_{queue_id}")],
                    [InlineKeyboardButton(text="üë§ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"remove_user_{queue_id}")],
                    [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"delete_queue_{queue_id}")]
                ])
        
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_queues")])
        
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("join_"))
async def callback_join_queue(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    user = await db.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
        return
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            queue = await db.get_queue(queue_id)
            if not queue:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            existing_member = await db.get_queue_member(queue_id, user_id)
            if existing_member:
                await callback.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏!", show_alert=True)
                return
            
            position = await db.add_to_queue(queue_id, user_id)
            total_members = await db.get_queue_member_count(queue_id)
            
            updated_text = f"‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å '{queue.name}'!\n\nüéØ –ü–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {total_members}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{queue_id}")],
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_{queue_id}")]
            ])
            
            await callback.message.edit_text(updated_text, reply_markup=keyboard)
            await callback.answer(f"‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position}!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("leave_"))
async def callback_leave_queue(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            member = await db.get_queue_member(queue_id, user_id)
            if not member:
                await callback.answer("‚ùå –¢—ã –Ω–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
                return
            
            await db.remove_from_queue(queue_id, user_id)
            await callback.answer("‚úÖ –¢—ã –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("next_"))
async def callback_next_user(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            queue = await db.get_queue(queue_id)
            if not queue:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            if queue.creator_id != user_id:
                await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", show_alert=True)
                return
            
            next_member = await db.get_next_in_queue(queue_id)
            if not next_member:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", show_alert=True)
                return
            
            await db.remove_from_queue(queue_id, next_member.user_id)
            await callback.answer(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {next_member.user.username} –≤—ã–∑–≤–∞–Ω!")
            await notify_user_about_turn(next_member.user_id, queue.name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("view_queue_"))
async def callback_view_queue(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[2])
    
    try:
        queue = await db.get_queue(queue_id)
        if not queue:
            await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        members = await db.get_queue_members(queue_id)
        if not members:
            await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        response = f"üìã {queue.name}\n\n"
        for member in members:
            response += f"{member.position}. {member.user.username}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"queue_info_{queue_id}")]
        ])
        
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("status_"))
async def callback_status(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    try:
        member = await db.get_queue_member(queue_id, user_id)
        if not member:
            await callback.answer("‚ùå –¢—ã –Ω–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
            return
        
        queue = await db.get_queue(queue_id)
        total_members = await db.get_queue_member_count(queue_id)
        
        response = f"üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏:\n\nüìã {queue.name}\nüéØ –ü–æ–∑–∏—Ü–∏—è: {member.position}\nüë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"queue_info_{queue_id}")]
        ])
        
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    help_text = """‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/create_queue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
/join <queue_id> - –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
/next <queue_id> - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/status <queue_id> - —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è
/leave <queue_id> - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
/view_queue <queue_id> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å
/delete_queue <queue_id> - —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/remove_user <queue_id> <username> - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)

üëÜ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data == "create_queue")
async def callback_create_queue(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_queue_name",
        "instruction_message_id": callback.message.message_id
    }
    
    await callback.message.edit_text(
        "üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏\n\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ –∫–æ–º–∞–Ω–¥):\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_queue_"))
async def callback_delete_queue(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    lock = await get_queue_lock(queue_id)
    async with lock:
        try:
            success = await db.delete_queue(queue_id, user_id)
            if success:
                await callback.message.edit_text(
                    "‚úÖ –û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            else:
                await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@dp.callback_query(F.data.startswith("remove_user_"))
async def callback_remove_user(callback: CallbackQuery):
    queue_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    await callback.message.edit_text(
        f"üë§ –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n/remove_user {queue_id} <username>\n\n–ì–¥–µ <username> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"queue_info_{queue_id}")]
        ])
    )
    await callback.answer()


@dp.message()
async def handle_unknown_message(message: Message):
    user_id = message.from_user.id
    
    if user_id in user_states and user_states[user_id].get("state") == "waiting_queue_name":
        queue_name = message.text.strip()
        if not queue_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(queue_name) > 100:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            queue_id = await db.create_queue(queue_name, user_id)
            
            instruction_message_id = user_states[user_id].get("instruction_message_id")
            if instruction_message_id:
                try:
                    await bot.delete_message(user_id, instruction_message_id)
                except:
                    pass
            
            del user_states[user_id]
            
            success_text = f"‚úÖ –û—á–µ—Ä–µ–¥—å '{queue_name}' —Å–æ–∑–¥–∞–Ω–∞!\n\nüÜî ID –æ—á–µ—Ä–µ–¥–∏: {queue_id}\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n\nüë• –ü–æ–¥–µ–ª–∏—Å—å ID —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"join_{queue_id}")],
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"view_queue_{queue_id}")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await message.delete()
            await message.answer(success_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            if user_id in user_states:
                del user_states[user_id]
        return
    
    help_text = """ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/create_queue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
/join <queue_id> - –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
/next <queue_id> - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/status <queue_id> - —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è
/leave <queue_id> - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
/view_queue <queue_id> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å
/delete_queue <queue_id> - —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
/remove_user <queue_id> <username> - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)

üëÜ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é!"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(help_text, reply_markup=keyboard)


async def cleanup_task():
    while True:
        try:
            await db.cleanup_expired_queues()
            await asyncio.sleep(3600)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            await asyncio.sleep(3600)

async def main():
    await db.init_db()
    
    cleanup_task_handle = asyncio.create_task(cleanup_task())
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    finally:
        cleanup_task_handle.cancel()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")